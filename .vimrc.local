" Modeline and Notes {{{
" vim: set sw=2 ts=2 sts=2 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker ft=vim
" }}}

" spf13 overrides {{{
" strong blowfish encryption (instead of zip)
set cryptmethod=blowfish
" prettier line wrap
set showbreak=â†ª
"}}}

" spf13 plugin removal {{{
" UnBundle has to be here not .vimrc.bundles.local...for some reason...
UnBundle 'spf13/vim-colors'
UnBundle 'tpope/vim-cucumber'
UnBundle 'quentindecock/vim-cucumber-align-pipes'
UnBundle 'spf13/vim-autoclose'
UnBundle 'flazz/vim-colorschemes'
UnBundle 'nathanaelkane/vim-indent-guides'
UnBundle 'scrooloose/nerdtree'
UnBundle 'bling/vim-airline'
"let g:indent_guides_enable_on_vim_startup = 0
" for some reason the default does not include ruby
autocmd FileType ruby autocmd BufWritePre <buffer> call StripTrailingWhitespace()

set textwidth=80

"let g:airline_powerline_fonts=1

" Fix for GitGutter: https://github.com/airblade/vim-gitgutter/issues/101
set shell=/bin/bash

" spf13 .vimrc overrides {{{
set clipboard+=unnamed
set shiftwidth=2                " Use indents of 2 spaces
set tabstop=2                   " An indentation every 2 columns
set softtabstop=2               " Let backspace delete indent
set noautochdir                 " do not automatically change directory
set pastetoggle=<F10>           " pastetoggle (sane indentation on pastes)
set wrap
set shiftround                  " When at 3 spaces and I hit >>, go to 4, not 5.
" spf13 has this mapped to NERDTreeToggle, but I want to be able to scroll with C-e/C-y
unmap <C-e>

" Folding
set foldmethod=syntax
nnoremap <silent><space> :exe 'normal! za'.(foldlevel('.')?'':'l')<cr>
map <leader><space> zO

" autocomplete rails
"let g:rubycomplete_rails = 1
"   }}}
" }}}

" Colors {{{
colo hybrid
" I like a dark tab bg
hi TabLine ctermfg=Black ctermbg=Yellow
hi TabLineFill ctermfg=Black ctermbg=White
hi Title ctermfg=Black ctermbg=Gray
" and dark background
hi Normal ctermbg=232
" }}}

" Mappings {{{
" open ctag in new tab
nmap <leader>ct <C-w><C-]><C-w>T

" move window to new tab
nmap <leader>mt <C-W>T

" tabnew
map <leader>tn :tabnew

" map Ctrl-Shift-6 to Ctrl-x
nmap <C-x> :e#<cr>
" map Ctrl-t to Ctrl-[
nmap <C-[> <C-t>

" Quickly toggle wrap mode (for the current window)
nmap <leader>w :setlocal wrap!<CR>:setlocal wrap?<CR>

" save / quit
map <C-s> :w<cr>
map <C-q> :q<cr>

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$
" yank all lines
nmap <leader>ya :%y+<cr>

" add new line without entering insert mode
nmap <CR> o<Esc>

" resize horizontal split windows
nmap <leader>j <C-W>10+
nmap <leader>k <C-W>10-
" resize vertical split window
nmap <leader>h <C-W>10>
nmap <leader>l <C-W>10<

" remap jj to escape
inoremap jj <ESC>
inoremap jk <ESC>

" unfold with one hand
nnoremap ;; zR

" sudo write file
command Sudo :w !sudo tee %

" Disable Ex mode
map Q <Nop>
" Disable K looking stuff up
map K <Nop>

" Alt-# to switch (arghh..starting with a number always seems to assume you're
" jumping to a number and messes up the command line.)
"nnoremap <A-1> 1gt
"nnoremap <A-2> 2gt
"nnoremap <A-3> 3gt
"nnoremap <A-4> 4gt
"nnoremap <A-5> 5gt
"nnoremap <A-6> 6gt
"nnoremap <A-7> 7gt
"nnoremap <A-8> 8gt
"nnoremap <A-9> 9gt
"nnoremap <A-0> 0gt
"nnoremap <Esc>1 gt1
"nnoremap <Esc>2 gt2
"nnoremap <Esc>3 gt3
"nnoremap <Esc>4 gt4
"nnoremap <Esc>5 gt5
"nnoremap <Esc>6 gt6
"nnoremap <Esc>7 gt7
"nnoremap <Esc>8 gt8
"nnoremap <Esc>9 gt9
"nnoremap <Esc>0 gt0
" }}}

" Languages {{{
  " Ruby
  nmap <leader>rci :%!ruby-code-indenter<cr>
  map <leader>sqf :Rcd<cr>:!sort -u tmp/quickfix > tmp/quickfix.sort<cr>:cfile tmp/quickfix.sort<cr>
  map <leader>sc  :!ruby -c %<cr>
  command! FR set filetype=ruby

  " Rails.vim extensions
  " Edit routes
  command! Rroutes :R config/routes.rb
  command! RTroutes :RT config/routes.rb

  " Edit factories
  command! Rfactories :R spec/support/factories.rb
  command! RTfactories :RT spec/support/factories.rb

  " Edit mocks
  command! Rmocks :R spec/support/mocks.rb
  command! RTmocks :RT spec/support/mocks.rb
"}}}

" Plugins {{{

  " Neosnippet {{{
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)"
        \: pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)"
        \: "\<TAB>"

  " For snippet_complete marker.
  if has('conceal')
    set conceallevel=2 concealcursor=i
  endif
  " }}}

  " Turbux {{{
  let g:turbux_command_prefix = 'zeus'
  nmap <leader>b :let turbux_command_prefix='bundle exec'<cr>
  " }}}

  " Vimux {{{
  " https://github.com/benmills/vimux/
  " Config
  " Use exising pane (not used by vim) if found instead of running split-window.
  let VimuxUseNearestPane = 1
  let g:VimuxOrientation = "v"

  " Close vim tmux runner opened by VimuxRunCommand
  map <Leader>vq :VimuxCloseRunner<CR>
  " }}}

  " Ctrl-P {{{
  :let g:ctrlp_match_window_bottom = 0
  :let g:ctrlp_match_window_reversed = 0
  :let g:ctrlp_working_path_mode = 0
  :let g:ctrlp_dotfiles = 0
  "}}}

  " Ack {{{
  map <leader>a :Ack<space>
  "}}}
" }}}

" Functions {{{
  " Merge a tab into a split in the previous window
  function! MergeTabs()
    if tabpagenr() == 1
      return
    endif
    let bufferName = bufname("%")
    if tabpagenr("$") == tabpagenr()
      close!
    else
      close!
      tabprev
    endif
    vsplit
    execute "buffer " . bufferName
  endfunction
  nmap <C-W>u :call MergeTabs()<CR>
"}}}


" Folding {{{
 " Fold hash-style #comments
  function! FoldHashComments()
    set fdm=expr
    set fde=getline(v:lnum)=~'^\\s#'?1:getline(prevnonblank(v:lnum))=~'^\\s#'?1:getline(nextnonblank(v:lnum))=~'^\\s*#'?1:0
    set foldlevel=0
  endfunction
  nmap <leader>fhc :call FoldHashComments()<cr>
" }}}
